import uuid
import asyncio
import json
from fastapi import FastAPI, BackgroundTasks
from .models.research import ResearchRequest, TaskResponse
from .agents.researcher import run_researcher
from .agents.analyst import run_analyst
from .agents.chartist import run_chartist

app = FastAPI(
    title="Delphi",
    description="A multi-agent system for automated financial research.",
    version="0.1.0"
)

@app.get("/")
def read_root():
    """A simple endpoint to confirm the API is running."""
    return {"status": "Delphi is online."}

async def run_delphi_workflow(ticker: str, query: str):
    print(f"--- Starting Delphi Workflow for {ticker} ---")
    research_data = await run_researcher(ticker, query)
    print("\n--- Raw Data Collected by Researcher Agent ---")
    print(json.dumps(research_data, indent=2))
    print("------------------------------------------\n")

    final_report = "Could not gather data, so no analysis was performed."
    chart_image = ""

    analyst_task = None
    chartist_task = None

    if research_data:
        analyst_task = asyncio.create_task(run_analyst(research_data, query))
    
    if "fetch_historical_prices" in research_data and research_data["fetch_historical_prices"]:
        chartist_task = asyncio.create_task(run_chartist(research_data["fetch_historical_prices"]))

    if analyst_task:
        final_report = await analyst_task
    if chartist_task:
        chart_image = await chartist_task

    print("\n--- Final Report Generated by Analyst Agent ---")
    print(final_report)
    print("---------------------------------------------\n")

    if chart_image:
        print("\n--- Chart Generated by Chartist Agent ---")
        print("Chart is available as a Base64 string (output truncated).")
        print(f"data:image/png;base64,{chart_image[:100]}...")
        print("-----------------------------------------\n")
    
    print("--- Delphi Workflow Finished ---")


@app.post("/research/", response_model=TaskResponse)
async def start_research(request: ResearchRequest, background_tasks: BackgroundTasks):
    """
    Accepts a research request and starts the Delphi agent workflow.
    """
    task_id = str(uuid.uuid4())
    
    background_tasks.add_task(run_delphi_workflow, request.ticker, request.query)
    
    return TaskResponse(task_id=task_id, status="PENDING")
