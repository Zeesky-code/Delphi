import uuid
import asyncio
import json
from fastapi import FastAPI, BackgroundTasks
from .models.research import ResearchRequest, TaskResponse
from .agents.researcher import run_researcher
from .agents.analyst import run_analyst

app = FastAPI(
    title="Delphi",
    description="A multi-agent system for automated financial research.",
    version="0.1.0"
)

@app.get("/")
def read_root():
    """A simple endpoint to confirm the API is running."""
    return {"status": "Delphi is online."}

async def run_delphi_workflow(ticker: str, query: str):
    print(f"--- Starting Delphi Workflow for {ticker} ---")
    research_data = await run_researcher(ticker, query)
    print("\n--- Raw Data Collected by Researcher Agent ---")
    print(json.dumps(research_data, indent=2))
    print("------------------------------------------\n")
    if research_data:
        final_report = await run_analyst(research_data, query)
    else:
        final_report = "Could not gather data, so no analysis was performed."
    
    print("\n--- Final Report Generated by Analyst Agent ---")
    print(final_report)
    print("---------------------------------------------\n")
    print("--- Delphi Workflow Finished ---")

@app.post("/research/", response_model=TaskResponse)
async def start_research(request: ResearchRequest, background_tasks: BackgroundTasks):
    """
    Accepts a research request and starts the Delphi agent workflow.
    """
    task_id = str(uuid.uuid4())
    
    background_tasks.add_task(run_delphi_workflow, request.ticker, request.query)
    
    return TaskResponse(task_id=task_id, status="PENDING")
